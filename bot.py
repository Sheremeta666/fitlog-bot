import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
from dotenv import load_dotenv

# –¢–æ–∫–µ–Ω
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ë–æ—Ç
from aiogram.client.default import DefaultBotProperties
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
workouts = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –ì—Ä—É–¥—å + –°–∫–∞–∫–∞–ª–∫–∞": ["–û—Ç–∂–∏–º–∞–Ω–∏—è (4x20)", "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª—ë–∂–∞ (4x12)", "–°–∫–∞–∫–∞–ª–∫–∞ (5-10 –º–∏–Ω)"],
    "–í—Ç–æ—Ä–Ω–∏–∫ ‚Äî –°–ø–∏–Ω–∞ + –ü—Ä–µ—Å—Å": ["–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è (4x6-8)", "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –≤ –Ω–∞–∫–ª–æ–Ω–µ (3x12)", "–ü–ª–∞–Ω–∫–∞ (3x40 —Å–µ–∫)"],
    "–°—Ä–µ–¥–∞ ‚Äî –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ": ["–°–∫–∞–∫–∞–ª–∫–∞ (10 –º–∏–Ω)", "–†–∞—Å—Ç—è–∂–∫–∞ (10-15 –º–∏–Ω)"],
    "–ß–µ—Ç–≤–µ—Ä–≥ ‚Äî –ù–æ–≥–∏ + –ü—Ä—ã–∂–∫–∏": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ (4x15)", "–ü—Ä—ã–∂–∫–∏ –Ω–∞ –≤–æ–∑–≤—ã—à–µ–Ω–Ω–æ—Å—Ç—å (3x10)"],
    "–ü—è—Ç–Ω–∏—Ü–∞ ‚Äî –ü–ª–µ—á–∏ + –ü—Ä–µ—Å—Å": ["–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –≤–≤–µ—Ä—Ö (4x12)", "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è + –ø–æ–¥—ä—ë–º—ã –Ω–æ–≥ (4x15)"],
    "–°—É–±–±–æ—Ç–∞ ‚Äî –ö–∞—Ä–¥–∏–æ": ["–ë–µ–≥ –≤ –≥–æ—Ä–∫—É (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫)", "–°–∫–∞–∫–∞–ª–∫–∞ (10 –º–∏–Ω)"],
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –û—Ç–¥—ã—Ö –∏ –†–∞—Å—Ç—è–∂–∫–∞": ["–†–∞—Å—Ç—è–∂–∫–∞ (10-15 –º–∏–Ω)", "–ü—Ä–æ–≥—É–ª–∫–∞ (20 –º–∏–Ω)"]
}

user_progress = {}
last_bot_messages = {}
main_menu_messages = {}
reply_menu_messages = {}
text_reply_messages = {}

def days_keyboard():
    kb = InlineKeyboardBuilder()
    for day in workouts:
        kb.button(text=day, callback_data=f"day:{day}")
    kb.adjust(1)
    return kb.as_markup()

def workout_keyboard(user_id: int, day: str):
    kb = InlineKeyboardBuilder()
    user_progress.setdefault(user_id, {}).setdefault(day, [])
    for i, exercise in enumerate(workouts[day]):
        if i not in user_progress[user_id][day]:
            kb.button(text=f"‚úÖ {exercise}", callback_data=f"do:{day}:{i}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    kb.adjust(1)
    return kb.as_markup()

def main_reply_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")]],
        resize_keyboard=True,
        is_persistent=True
    )

async def clear_old(user_id, chat_id):
    if user_id in last_bot_messages:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=last_bot_messages[user_id])
        except:
            pass
    if user_id in reply_menu_messages:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=reply_menu_messages[user_id])
        except:
            pass
    if user_id in text_reply_messages:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=text_reply_messages[user_id])
        except:
            pass

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    await clear_old(user_id, chat_id)
    msg = await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=days_keyboard())
    await message.answer(reply_markup=main_reply_keyboard())
    main_menu_messages[user_id] = msg.message_id
    last_bot_messages[user_id] = msg.message_id

@router.callback_query(lambda c: c.data.startswith("day:"))
async def handle_day(callback: types.CallbackQuery):
    day = callback.data.split(":")[1]
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    user_progress.setdefault(user_id, {})
    user_progress[user_id][day] = []
    await callback.message.delete()
    await clear_old(user_id, chat_id)
    msg = await callback.message.answer(
        f"<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {day}:</b>\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω–∏–ª üëá",
        reply_markup=workout_keyboard(user_id, day)
    )
    await callback.message.answer(reply_markup=main_reply_keyboard())
    last_bot_messages[user_id] = msg.message_id
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("do:"))
async def handle_done(callback: types.CallbackQuery):
    _, day, index = callback.data.split(":")
    index = int(index)
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    user_progress.setdefault(user_id, {}).setdefault(day, [])
    if index not in user_progress[user_id][day]:
        user_progress[user_id][day].append(index)
    await callback.message.delete()
    await clear_old(user_id, chat_id)
    msg = await callback.message.answer(
        f"<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ {day}:</b>\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω–∏–ª üëá",
        reply_markup=workout_keyboard(user_id, day)
    )
    await callback.message.answer(reply_markup=main_reply_keyboard())
    last_bot_messages[user_id] = msg.message_id
    await callback.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ")

@router.callback_query(lambda c: c.data == "back")
async def go_back(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    await callback.message.delete()
    await clear_old(user_id, chat_id)
    msg = await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=days_keyboard())
    await callback.message.answer(reply_markup=main_reply_keyboard())
    last_bot_messages[user_id] = msg.message_id
    main_menu_messages[user_id] = msg.message_id
    await callback.answer()

@router.message(lambda m: m.text == "üìÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
async def return_to_schedule(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    await clear_old(user_id, chat_id)
    try:
        await message.delete()
    except:
        pass
    msg = await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=days_keyboard())
    await message.answer(reply_markup=main_reply_keyboard())
    last_bot_messages[user_id] = msg.message_id
    main_menu_messages[user_id] = msg.message_id

@router.message()
async def rude_reply(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        await message.delete()
    except:
        pass
    await clear_old(user_id, chat_id)
    msg = await message.answer("—Ç—ã –¥–æ–¥–∏–∫? –Ω–∞—Ö—É–π —Ç—ã –º–Ω–µ —ç—Ç–æ –ø–∏—à–µ—à—å, —Ç–µ—Ä—è–π—Å—è")
    await message.answer(reply_markup=main_reply_keyboard())
    last_bot_messages[user_id] = msg.message_id

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
